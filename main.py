"""
REST stands for
REpresentational
State
Transfer
"""

from flask import Flask
from flask_restful import Api, Resource, reqparse, abort, fields, marshal_with

from flask_sqlalchemy import SQLAlchemy

from os.path import exists

app = Flask(__name__)

api = Api(app)  # wrap the app into an api -- symbolizes the fact that we'll 
                # use the RESTful API

# our old handmade "databases"
# names = {
#     "tim": {"age": 19, "gender": "male"},
#     "bill": {"age": 27, "gender": "male"}
#     }

# videos = {
# }

# actual database:
# define the path to database, database.db being the relative current path to db
relative_path = "database.db"
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + relative_path
# initialize database
db = SQLAlchemy(app) # SQLAlchemy is very popular to work along with Flask

class VideoModel(db.Model):
    ## define all fields you want in your model
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False) # field needs to have a name
    views = db.Column(db.Integer, nullable=False)
    likes = db.Column(db.Integer, nullable=False)

    def __repr__(self):
        return f"Video(name = {self.name}, views = {self.views}, likes = {self.likes})"

# create database (only do it once, after the models of the database are defined)
if not exists(relative_path):
    with app.app_context():
        db.create_all()



video_put_args = reqparse.RequestParser() # process the requests and check validity

# mandatory arguments for put requests on video
video_put_args.add_argument("name", type=str, help="Name of the video", required=True, location="form")
video_put_args.add_argument("views", type=int, help="How many views the video have", required=True, location="form")
video_put_args.add_argument("likes", type=int, help="Number of likes on the video", required=True, location="form")


video_update_args = reqparse.RequestParser()
video_update_args.add_argument("name", type=str, help="Name of the video", required=False, location="form")
video_update_args.add_argument("views", type=int, help="How many views the video have", required=False, location="form")
video_update_args.add_argument("likes", type=int, help="Number of likes on the video", required=False, location="form")

# Quick note: As per RESTful API standard, PUT is used when the URI of the 
# resource is known and POST is used when URI unknown. Meaning that if the ID for 
# the resource is passed with the request, then PUT is used. If the ID will be 
# generated by the service, POST should be used.

# def abort_if_video_id_doesnt_exist(video_id):
#     if video_id not in videos:
#         abort(404, message="Could not find video.")

# def abort_if_video_id_exist(video_id):
#     if video_id in videos:
#         abort(409, message="Video already exists with given ID.") # 409 is for already exists errors

# define the fields of the VideoModel I want to return
resource_fields = {
    'id': fields.Integer,
    'name': fields.String,
    'views': fields.Integer,
    'likes': fields.Integer
}

# make a resource
class Video(Resource):
    @marshal_with(resource_fields) # when we return, serialize return value according to resource_fields
    def get(self, video_id):
        # we don't want to crash the server whenever the video_id doesn't exist
        ##

        result = VideoModel.query.filter_by(id=video_id).first()

        if not result:
            abort(404, message="Could not find video with given id...")
        # return serialized instance
        return result
    
    @marshal_with(resource_fields)
    def put(self, video_id):
        # videos[video_id] = video
        # abort_if_video_id_exist(video_id)
        args = video_put_args.parse_args()

        # check existence
        result = VideoModel.query.filter_by(id=video_id).first()
        if result:
            abort(409, message="Video id taken...")


        # videos[video_id] = args
        video = VideoModel(id=video_id, name=args["name"], views=args["views"], likes=args["likes"])
        
        # commit to db
        db.session.add(video) # send SQL query
        db.session.commit() # commit

        return video#, 201 # 201 for CREATED OK
    
    @marshal_with(resource_fields)
    def patch(self, video_id): # upd part of an entry
        args = video_update_args.parse_args()
        result = VideoModel.query.filter_by(id=video_id).first()
        if not result:
            abort(404, message="Video not found...")

        # doesn't work because the arg parser automatically fill with none values the missing fields
        # if "name" in args:
        #     result.name = args["name"]
        # if "views" in args:
        #     result.views = args["views"]
        # if "likes" in args:
        #     result.likes = args["likes"]
        print(result.views)

        # do this instead
        if args["name"] != None:
            result.name = args["name"]
        if args["views"] != None:
            result.views = args["views"]
        if args["likes"] != None:
            result.likes = args["likes"]

        # db.session.add(result) # useless
        db.session.commit()
        # print(result)
        return result#, 204
        

    def delete(self, video_id):
        # abort_if_video_id_doesnt_exist(video_id)
        del videos[video_id]
        return {"message": "Deletion successful"}#, 204 # 204 deleted successfully

# register it as resource (same as route?)
api.add_resource(Video, "/video/<int:video_id>")

if __name__ == "__main__":

    app.run(debug=True) # never run debug=True un production environment