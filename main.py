"""
REST stands for
REpresentational
State
Transfer
"""

from flask import Flask
from flask_restful import Api, Resource, reqparse, abort

app = Flask(__name__)

api = Api(app)  # wrap the app into an api -- symbolizes the fact that we'll 
                # use the RESTful API

# our "database"
names = {
    "tim": {"age": 19, "gender": "male"},
    "bill": {"age": 27, "gender": "male"}
    }

videos = {
}

video_put_args = reqparse.RequestParser() # process the requests and check validity

# mandatory arguments for put requests on video
video_put_args.add_argument("name", type=str, help="Name of the video", required=True, location="form")
video_put_args.add_argument("views", type=int, help="How many views the video have", location="form")
video_put_args.add_argument("likes", type=int, help="Number of likes on the video", location="form")

# Quick note: As per RESTful API standard, PUT is used when the URI of the 
# resource is known and POST is used when URI unknown. Meaning that if the ID for 
# the resource is passed with the request, then PUT is used. If the ID will be 
# generated by the service, POST should be used.

def abort_if_video_id_doesnt_exist(video_id):
    if video_id not in videos:
        abort(404, message="Could not find video.")

def abort_if_video_id_exist(video_id):
    if video_id in videos:
        abort(409, message="Video already exists with given ID.") # 409 is for already exists errors

# make a resource
class Video(Resource):
    def get(self, video_id):
        # we don't want to crash the server whenever the video_id doesn't exist
        abort_if_video_id_doesnt_exist(video_id)
        return videos[video_id]
    
    def put(self, video_id):
        # videos[video_id] = video
        abort_if_video_id_exist(video_id)
        args = video_put_args.parse_args()
        
        videos[video_id] = args
        return videos[video_id], 201 # 201 for CREATED OK

    def delete(self, video_id):
        abort_if_video_id_doesnt_exist(video_id)
        del videos[video_id]
        return {"message": "Deletion successful"}, 204 # 204 deleted successfully

# register it as resource (same as route?)
api.add_resource(Video, "/video/<int:video_id>")

if __name__ == "__main__":

    app.run(debug=True) # never run debug=True un production environment